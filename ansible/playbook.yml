---
- name: Configure Docker deployment on EC2
  hosts: task_tracker
  become: true
  vars:
    docker_image: "{{ dockerhub_username }}/task-tracker:latest"
    container_name: "your-app-container"
    docker_compose_dir: "/opt/docker-compose"
    docker_compose_file: "{{ docker_compose_dir }}/docker-compose.yml"
  
  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes
      when: ansible_os_family == "Debian"

    - name: Install required packages
      package:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
          - python3-pip
        state: present
      when: ansible_os_family == "Debian"

    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present
      when: ansible_os_family == "Debian"

    - name: Add Docker repository
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present
      when: ansible_os_family == "Debian"

    - name: Install Docker
      package:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: present
      when: ansible_os_family == "Debian"

    - name: Install Docker Compose
      pip:
        name: docker-compose
        state: present

    - name: Create Docker Compose directory
      file:
        path: "{{ docker_compose_dir }}"
        state: directory
        mode: '0755'

    - name: Create Docker Compose file
      template:
        src: templates/docker-compose.yml.j2
        dest: "{{ docker_compose_file }}"
        mode: '0644'

    - name: Create .env file if needed
      template:
        src: templates/env.j2
        dest: "{{ docker_compose_dir }}/.env"
        mode: '0644'
      when: env_vars is defined

    - name: Log in to Docker Hub
      shell: docker login -u "{{ dockerhub_username }}" -p "{{ dockerhub_token }}"
      no_log: true
      args:
        executable: /bin/bash

    - name: Pull Docker image
      community.docker.docker_image:
        name: "{{ docker_image }}"
        source: pull
      
    - name: Install Docker Python module
      pip:
        name: docker
        state: present

    - name: Run Docker Compose
      community.docker.docker_compose_v2:
        project_src: "{{ docker_compose_dir }}"
        state: present

    - name: Ensure Docker service starts on boot
      systemd:
        name: docker
        enabled: yes
        state: started